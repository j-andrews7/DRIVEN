# configuration file format (used to define options passed into called methods):
#    # comment line
#    <method_name>    # apply successive lines to this method call
#    var1=value       # the variable names should match items relevant to the method options
#    var2=value    REFN    # optional tab separated REFN key
#                          # REFN can be any unique character sequence, prefer: [a-zA-Z0-9]
#                          # REFN character sequence must NOT match any non-REF value
#    var3=REFN             # using the previously defined REFN
#    <method_name2>
#    var1=value
#
#	if change variable set or processed file set update vampire.createConfigLookup()
#	note: values for variables whose name contains file or str are quoted during execution
#
<thresholds.py>
# compute motif thresholds
run=True
run_order=1
motif_file=../../data/HOCOMOCOv10.JASPAR_FORMAT.TF_IDS.txt	
# 	-m (required) Input filename of a file containing PWMs.
motif_outfile=../../data/HOCOMOCOv10.JASPAR_FORMAT.TF_IDS.fpr_0p001.txt	REF_MOTIF_FILE
# 	-o (required) = Output filename.
#baseline_file=	
# 	-bp (optional) <baselines.txt> = A file containing a single line with
#		 tab delineated values for baseline probabilities for A, C, G, T (in order).
#		 Probabilities should all be positive and should sum to 1. If not provided 
#		 then all are assumed to be equally likely (all are 0.25).
pseudocounts=0.1	
# 	-pc (optional) <0.1> = Pseudocounts value to be added to all positions of the 
#		motif frequency matrix before calculating the probability matrix.
threshold=None	
# 	-th (optional) <None> = Default threshold value. 
#		used if the calculated threshold is lower. Good unknown value is zero.
false_pos_rate=0.001	
# 	-fpr (optional) <0.05> = Acceptable false positive rate for defining thresholds for each motif.
precision_exp=4	
# 	-pe (optional) <4> = Integer precision exponent used for threshhold calculations.
#		Making this greater than 5 may result in extremely slow run times. 
#		Using a lower number will result in faster (but potentially innacurate) calculations. 
#		Allowed value range 1 to Inf (technically allowed, not-advised).
overwrite=False	
# 	-ow (optional flag) = OverWrite: If present, thresholds already present in
#		the input file will be replaced in the output file.
#
#
<tf_expression.py>	#filter motifs by gene expression
run=True
run_order=2
input_file=../../data/FLDL_CCCB_RARE_VARIANTS.MERGED.RNA_DP10.RNA_NODUPS.CHIP_MULTIMARK.SORTED.vcf	VCF_1
#    -i (required) <input.vcf>: Name of sorted variant file to process.
exp_file=../../data/ALL_ARRAYS_NORMALIZED_MAXPROBE_LOG2_COORDS.sorted.txt	EXP_1
#    -e (required) <expression.bed>: An expression 'bed' file.
output_file=1
#    -o (required) <output.vcf>: Name of output file to be created.
#        Not created if using -m and -mo
motif_file=REF_MOTIF_FILE
#    -m (optional) <motif.txt>: Tab-delimited key file containing a frequency
#       matrix with each row corresponding to a base and each column
#       corresponding to a position (JASPAR format).
#       If specified ignores input.vcf and output.vcf
motif_out_file=../../data/HOCOMOCOv10.JASPAR_FORMAT.TF_IDS.fpr_0p001.txt.bed_reduced.txt	REF_MOTIF_FILE_EXPRESSED
#    -mo (optional) <motif_output.txt>: Name of output motif file to be created.
#       if blank and -m then creates .tf_filtered version of motif.txt file
threshold=5
#    -th (optional) <5>: TFs are considered expressed if they are above this threshold.
#
#
<motifs.py>		# modify vcf file to show which motif matches changed
run=True
run_order=3
input_file=VCF_1
#  	 -i (required) <input.vcf>: Name of sorted variant file to process.
file_reference=../../data/genome_reference/reference_genome_hg19.fa
#	 -r (required) <reference.fa>: Name of reference sequence
#        file to get surrounding bases from variant.
file_motif=REF_MOTIF_FILE_EXPRESSED
#    -m (required) <motif.txt>: Tab-delimited key file containing a frequency
#        matrix with each row corresponding to a base and each column
#        corresponding to a position (JASPAR format). File may or may not
#        have thresholds identified in the transcription factor (TF) name line.
output_file=../../data/output.motif.20170114.vcf	REF_MOTIF_FILE_MTF
#    -o (required) <output.vcf>: Name of output file to be created.
#
# -- arguments that change scoring of TF against variants in vcf -- #
#
#baseline_file=
#    -bp (optional) <baselines.txt>: A file containing a single line with tab
#        delineated values for baseline probabilities for A, C, G, T (in order).
#        Probabilities should all be positive and should sum to 1. If none is
#        provided then all are assumed to be equally likely.
pseudocounts=0.1
#    -pc (optional) <0.1>: Pseudocounts value to be added to all positions of
#        the motif frequency matrix before calculating the probability matrix.
threshold=0
#    -th (optional) <0>: Motifs are considered a match if they score above a
#        given threshold. This is the default threshold (used if no threshold is
#        specified by motif file).
wing_size=50
#	 -ws (optional) <50>: Wing size in bp to search for weak homotypic
#        matches, co-binding tfs, and GC content. 
multi_var=0
#    -mv (optional) <ws>: merge adjacent variants for same chromosome and sample
#        that occur within passed integer distance. Use -1 to set = wing size.
#        Integer distance to search for adjacent variants for the same chromosome 
#		 and sample to merge.
#  		 Expects a positive value. Use -1 to set = wing size.
#        None, 0 and < -1 mean multi-variant merge is not performed.
run_homotypic=False
#    -ht (optional): Boolean, if True runs homotypic matches,
#        None or False does not.
force_ref_match=False
#    -rf (optional): (boolean) if true then force variant reference bases
#        to match FASTA reference
#
# -- chip specific arguments -- #
#
chip_file=../../data/GM12878.ENCODE.ALL_TFS.bed
#    -ci (optional) <ChIP.bed>: A sorted bed-like file containing tab delineated
#        columns of the form:
#        chr start end TF1;TF2;TF3...
#        Ignored if filter_co not True. No output chip file unless
#        file_output_chip is defined
chip_out_file=../../data/output.chip_peaks_output.20170114.bed
#    -co (optional) <chip_out.bed> = Name of output bed file to be created.
#        A new column will be added with motifs that computationally match each
#        peak. Ignored if filter_co not True or file_chip not defined.
filter_co=True
#    -fp (optional flag): If -fp (filter with peaks) is included, ChIP peaks
#        that do not match any motif will not be included in the output (-co).
kary_sort=False
#   -sk (optional flag): Use if sorted by karyotype, do not if sorted numerically.
#		 karyotype sort means sorted lexicographically.
#        Input vcf file and chip bed file must be sorted the same way
#        Are input files chr sorted lexicographically (karyotype) or numerically?
#		 True: lexicographically: i.e. chr1 < chr11 < chr2 < chrX < chrY
#        False: numerically:      i.e. chr1 < chr2 < chr11 < chrX < chrY
#
# -- arguments that filter output vcf -- #
#
filter_chip=False
#    -fc (optional): filter_chip YYY; can not also be called with fn
#		 Boolean, if True filter output vcf file for ChIP peak overlap
#        Can not also be called with filter_novel.
#        Translated to options.filter_vcf_chip.
filter_motif=True
#    -fm (optional flag): If -fm (filter with motifs) is included, variants
#        that do not match any motif will not be included in the output file.
filter_novel=False
#    -fn (optional): filter_novel YYY; can not also be called with fc
#		 If True, exclude output to vcf output file
#        if they do match a ChIP peak. Only print potentially novel variants
#        Can not also be called with filter_chip
#        Translated to options.filter_vcf_no
#
#
<activity.py>		#z-scores for Chip Peaks in samples with/without variant
run=True
run_order=4
input_file=REF_MOTIF_FILE_MTF
#	 -i (str): Path to sorted variant file to process.
activity_file=../../data/QN_FLDL_CCCB_K27AC_PEAKS_SIGNAL.bed
#    -a (str): Path to activity 'bed' file.
output_vcf_file=../../data/output.activity.20170114.vcf	ACT_VCF_FILE
#    -ov (str): Path to VCF output file to be created.
output_bed_file=../../data/output.activity.20170114.bed
#    -ob (str): Path to loci output file to be created.
threshold=2
#	 -th (float, optional): Z-score magnitude threshold that must be met for variants/loci to be reported to output.
#        Default is 0, so all loci a variant overlaps will be reported.
filter_bed_num=0
#    -fan (int, optional): Set number of samples that must meet z-score threshold for a locus to be reported to
#        bed output file. So this number of samples must have the variant and have the locus's activity be significantly
#        affected by it. Default is 0, so a locus will be reported if its activity is altered in even one sample above
#        the z-score threshold.
include_bed=False
#    -ib (bool, optional): Should loci that don't contain any variants that significantly affect their activity
#        be included in the bed output? False by default, set to True if wanted.
include_vcf=False
#    -iv (bool, optional): Should variants that don't significantly alter a locus's activity be included in the
#        vcf output? False by default, set to True if wanted.
#drop_activity_=1
#	 -da (integer, optional): If > 0 then break activity items on _,
        return only unique part of name.
#
#
<gene_expression.py>	#z-scores for genes with specified distance from variant
run=True
run_order=5
input_file=ACT_VCF_FILE
#    -i (str) = Name of vcf file to process.
expression_file=EXP_1
#    -e (str) = Name of expression file.
output_vcf_file=../../data/output.gene_expression.20170114.vcf
#    -ov (str) = Name of vcf output file.
wing_size=50000
#    -size (int, optional) = An integer to define the distance from the center or edges of the
#        loci to look for gene overlap. 50 kb by default.
threshold=0
#    -th (int, optional) = Z-score magnitude threshold that must be met for variants/loci to be reported to output.
#        Default is 0, so all loci a variant overlaps will be reported. 0 by default.
ethreshold=0
#    -eth (int, optional) = If given, will exclude genes that are below this threshold for all
#        samples in the expression file. Good for excluding genes that aren't expressed. 0 by default.
include_vcf=False
#	  -iv

